#Yi Li Ng, 1005743741, yili.ng@mail.utoronto.ca
#Jeff Li, 1005802801, jelicj.li@mail.utoronto.ca

Target 1:
Shellcode is 46 bytes (for all targets). 0x3021fec8 is the return address of lab_main. 0x3021fe50 is the start of the target buffer. Thus the distance between the start of the buffer and the return address is 120. 120 - 46 = 74 so this is the padding needed before the shellcode. 74 NOPs are placed at the start of the exploit string, followed by the shellcode and the new return address, which is the address of the buffer. The buffer overflows when the new return address is copied onto the stack, since that’s where the old return address is; it’ll be overwritten.

Target 2:
The vulnerability lies in the ability to copy more data into a buffer that was initialized to size 256. We can overwrite the values for len and i to allow for more than the original 272 iterations (len at 0x3021fe88, i at 0x3021fe8c). Buffer starts at 0x3021fd80, but 0x3021fd86 is where the NOPs start, so we set the return address to "\x86\xfd\x21\x30". Env is needed because null terminators will be encountered, allowing us to point to separate attack strings. NOPs are used between attack strings to allow us to bypass values we don’t need to change. 

Target 3:
This is similar to target 1, where the return address can be overwritten to point to the start of the buffer where the shellcode is. However, it is the return address of function ‘foo’ that will be overwritten (at location 0x3021fe98) and the buffer starting address is moved up by 4 to 0x3021fe54 due to line 13 in the ‘bar’ function.

Target 4:
The vulnerability lies in the ability to copy more data into a buffer that was initialized to size 156. Buffer starts at 0x3021fdf0, but 0x3021fdf6 is where the NOPs start, so we set the return address to "\xf6\xfd\x21\x30". Since i is at a lower address than len, we cannot increase len first to keep running the for loop. Instead, we reset i to 0 and adjust len when we get there to a smaller value (i at 0x3021fe98, len at 0x3021fe9c). Similar to Target 2, we need to use env and NOPs. 